@page "/home"
@layout MainLayout
@using Kulicha.Components.RealTimeMap
@using Kulicha.Components.Layout
@using SpacetimeDB
@using SpacetimeDB.Types
@rendermode InteractiveServer
@using Kulicha.Services
@using Microsoft.Extensions.Logging
@inject SpacetimeDbService SpacetimeService
@inject IJSRuntime JSRuntime
@inject ILogger<Auth> Logger
@inject NavigationManager NavigationManager

<RealTimeMap Parameters="parameters" height="460px" width="620px"></RealTimeMap>

@code{
    static string openCycleMapAPIKey = "";
    RealTimeMap.LoadParameters parameters = new RealTimeMap.LoadParameters()
    {
        basemap = new RealTimeMap.Basemap()
        {
            basemapLayers = new List<RealTimeMap.BasemapLayer>()
            {
                new RealTimeMap.BasemapLayer()
                {
                    url = "http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
                    attribution = "©Open Street Map",
                    title = "Open Street Map",
                    detectRetina = true
                },
                new RealTimeMap.BasemapLayer()
                {
                    url = "https://tile.opentopomap.org/{z}/{x}/{y}.png",
                    attribution = "Open Topo",
                    title = "Open Topo",
                    detectRetina = true
                },
                new RealTimeMap.BasemapLayer()
                {
                    url = "https://tile.thunderforest.com/cycle/{z}/{x}/{y}.png?apikey=" + openCycleMapAPIKey,
                    attribution = "©Open Cycle Map",
                    title = "Open Cycle Map"
                },
            }
        },
    }

}
@code {

    private bool IsVerifyingLogin { get; set; } = false;
  
    
   
    [Parameter]
    [SupplyParameterFromQuery(Name = "view")]
    public string? View { get; set; }
    protected override void OnParametersSet()
    {
        if (!string.IsNullOrEmpty(View))
        {
            if (View.Equals("verify", StringComparison.OrdinalIgnoreCase))
            {
                IsVerifyingLogin = true;
            }
            else if (View.Equals("login", StringComparison.OrdinalIgnoreCase))
            {
                IsVerifyingLogin = false;
            }
        }
        base.OnParametersSet();
    }
    private string ErrorMessage { get; set; } = "";
    private string SuccessMessage { get; set; } = "";
    private User? CurrentUser { get; set; } 
    private ProfileModel profileModel = new ProfileModel(); 
    protected override async Task OnInitializedAsync()
    {
        SpacetimeService.OnConnect += HandleConnectionChange;
        SpacetimeService.OnDisconnect += HandleConnectionChange;
        SpacetimeService.OnIdentityReceived += HandleIdentityReceived;
        SpacetimeService.OnProfileReceived += HandleProfileReceived; 
        SpacetimeService.OnErrorReceived += HandleSpacetimeError;
        HandleConnectionChange(); 
        await base.OnInitializedAsync(); 
    }
    private void HandleConnectionChange()
    {
        if (SpacetimeService.IsAuthenticated)
        {
            Logger.LogInformation("Authenticated. Attempting to load profile if not already loaded.");
            if (CurrentUser == null) 
            {
                _ = LoadProfile(); 
            }
        }
        else
        {
            Logger.LogInformation("Not authenticated. Resetting view to Login.");
            IsVerifyingLogin = false; 
            CurrentUser = null; 
        }
        InvokeAsync(StateHasChanged); 
    }
    private void HandleIdentityReceived(Identity identity)
    {
        Logger.LogInformation("Identity received: {Identity}", identity);
        if (CurrentUser == null)
        {
            _ = LoadProfile();
        }
        InvokeAsync(StateHasChanged); 
    }

    private void HandleProfileReceived(User user)
    {
        Logger.LogInformation("Profile received for user: {Username}", user?.Username ?? "[No Username]");
        CurrentUser = user;
        if (CurrentUser != null)
       {
            profileModel = new ProfileModel{ Email = CurrentUser.Email ?? ""};
            Logger.LogInformation("User authenticated successfully, navigating to Home page");
            NavigationManager.NavigateTo("/home");
        }
        
        else
       {
            Logger.LogWarning("Received null profile data?");
            ErrorMessage = "Received invalid profile data.";
        }
// Ensure UI updates to reflect profile load (e.g., enable profile button if it depended on CurrentUser)
        InvokeAsync(StateHasChanged);
    }

    private async void HandleSpacetimeError(string errorType, string errorMessage)
    {
        Logger.LogError("SpacetimeDB Error ({ErrorType}): {ErrorMessage}", errorType, errorMessage);
        ErrorMessage = $"Error: {errorMessage}";
        SuccessMessage = ""; 
        await InvokeAsync(StateHasChanged);   
    }

    private void HandleProfileUpdate()
    {
        if (!SpacetimeService.IsAuthenticated || CurrentUser == null)
        { /* ... error handling ... */
            return;
        }

        try
        {
            ErrorMessage = "";
            SuccessMessage = "Updating profile...";
            Logger.LogInformation("Attempting to update profile for user: {Identity}", SpacetimeService.LocalIdentity);

            SpacetimeService.UpdateProfile(profileModel.Email );
            SuccessMessage = "Profile update request sent."; 
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Profile update failed: {ex.Message}";
            Logger.LogError(ex, "Error during profile update submission");
            SuccessMessage = "";
        }
        InvokeAsync(StateHasChanged); // Update UI
    }

    private async Task LoadProfile()
    {
        if (!SpacetimeService.IsAuthenticated)
        {
            Logger.LogWarning("LoadProfile called but not authenticated.");
         return;
       }

        try
        {
            Logger.LogInformation("Requesting profile data from SpacetimeDB.");
            SpacetimeService.RequestProfile();
       }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading profile: {ex.Message}";
            Logger.LogError(ex, "Error requesting user profile");
// SuccessMessage = ""; // Clear loading message
        }
// State update will happen via HandleProfileReceived or HandleSpacetimeError
        await InvokeAsync(StateHasChanged); // Not strictly necessary here if events handle it
    }

    private void SwitchView(bool showVerifyForm)
    {
        IsVerifyingLogin = showVerifyForm;
        ErrorMessage = ""; 
        SuccessMessage = "";
        InvokeAsync(StateHasChanged);
    } 

    private async Task HandleLogout()
    {
        Logger.LogInformation("Logout requested.");
        ErrorMessage = "";
        SuccessMessage = "Logging out...";
        await InvokeAsync(StateHasChanged); // Show immediate feedback
        try
        {
            await SpacetimeService.DisconnectAsync();

        }
        catch (Exception ex)
        {
            ErrorMessage = $"Logout failed: {ex.Message}";
            Logger.LogError(ex, "Error during logout");
            SuccessMessage = ""; // Clear logging out message
            await InvokeAsync(StateHasChanged); // Show error
        }
    }
    public void Dispose()
    {
        SpacetimeService.OnConnect -= HandleConnectionChange;
        SpacetimeService.OnDisconnect -= HandleConnectionChange;
        SpacetimeService.OnIdentityReceived -= HandleIdentityReceived;
        SpacetimeService.OnProfileReceived -= HandleProfileReceived;
        SpacetimeService.OnErrorReceived -= HandleSpacetimeError;
        GC.SuppressFinalize(this);
    } 

    public class ProfileModel {
        [Required]
        [EmailAddress]
        [StringLength(254)]
        public string Email { get; set; } = "";
    }
}
