@page "/"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using Kulicha.Services
@using Microsoft.Extensions.Logging
@using SpacetimeDB
@using SpacetimeDB.Types
@inject SpacetimeDbService SpacetimeService
@inject ILogger<Auth> Logger


<div class="min-h-screen bg-gray-100 flex flex-col justify-center py-12 sm:px-6 lg:px-8">
    <div class="sm:mx-auto sm:w-full sm:max-w-md">
        <div class="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10 container">
            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="mb-4 rounded-md bg-red-50 p-4 border border-red-200" role="alert">
                    <div class="flex">
                        <div class="flex-shrink-0">
                            @* Heroicon: x-circle (optional for visual flair) *@
                            <svg class="h-5 w-5 text-red-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"
                                 fill="currentColor" aria-hidden="true">
                                <path fill-rule="evenodd"
                                      d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
                                      clip-rule="evenodd"/>
                            </svg>
                        </div>
                        <div class="ml-3">
                            <p class="text-sm font-medium text-red-800">@ErrorMessage</p>
                        </div>
                    </div>
                </div>
            }

            @if (!string.IsNullOrEmpty(SuccessMessage))
            {
                <div class="mb-4 rounded-md bg-green-50 p-4 border border-green-200" role="alert">
                    <div class="flex">
                        <div class="flex-shrink-0">
                            @* Heroicon: check-circle (optional) *@
                            <svg class="h-5 w-5 text-green-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"
                                 fill="currentColor" aria-hidden="true">
                                <path fill-rule="evenodd"
                                      d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                                      clip-rule="evenodd"/>
                            </svg>
                        </div>
                        <div class="ml-3">
                            <p class="text-sm font-medium text-green-800">@SuccessMessage</p>
                        </div>
                    </div>
                </div>
            }

            <h2 class="mb-6 text-center text-2xl font-bold text-gray-900">
                @(!IsVerifyingLogin ? "Login" : "Verify Login")
            </h2>

            @if (!IsVerifyingLogin)
            {
                @* Login Form *@
                <EditForm Model="@loginModel" OnValidSubmit="HandleLogin" FormName="loginForm" class="space-y-6">
                    <DataAnnotationsValidator/>
                    @* ValidationSummary can be styled or placed differently if needed *@
                    <ValidationSummary class="mb-4 text-sm text-red-600"/>

                    <div>
                        <label for="email" class="block text-sm font-medium text-gray-700">
                            Email address
                        </label>
                        <div class="mt-1">
                            <InputText id="email" @bind-Value="loginModel.Email" type="email" required
                                       class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"/>
                            <ValidationMessage For="@(() => loginModel.Email)" class="mt-1 text-sm text-red-600"/>
                        </div>
                    </div>

                    <div>
                        <button type="submit"
                                class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50"
                                disabled="@(!string.IsNullOrEmpty(SuccessMessage) && SuccessMessage.Contains("Processing"))"> @* Disable while processing *@
                            Login
                        </button>
                    </div>
                </EditForm>
            }
            else
            {
                @* Verification Form *@
                <EditForm Model="@verifyModel" OnValidSubmit="HandleVerification" FormName="verifyForm" class="space-y-6">
                    <DataAnnotationsValidator/>
                    <ValidationSummary class="mb-4 text-sm text-red-600"/>
                    
                    <div>
                        <label for="verification-code" class="block text-sm font-medium text-gray-700">
                            Verification Code
                        </label>
                        <div class="mt-1">
                            <InputText id="verification-code" @bind-Value="verifyModel.VerificationCode" required
                                       class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                                       placeholder="Enter the 6-digit code"/>
                            <ValidationMessage For="@(() => verifyModel.VerificationCode)" class="mt-1 text-sm text-red-600"/>
                        </div>
                        <p class="mt-1 text-xs text-gray-500">A verification code has been sent to @verifyModel.Email</p>
                    </div>

                    <div class="flex space-x-3">
                        <button type="submit"
                                class="flex-1 flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50"
                                disabled="@(!string.IsNullOrEmpty(SuccessMessage) && SuccessMessage.Contains("Verifying"))">
                            Verify
                        </button>
                        <button type="button" @onclick="() => SwitchView(false)"
                                class="flex-1 flex justify-center py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                            Back
                        </button>
                    </div>
                </EditForm>
            }

            <div class="mt-6">
                <div class="relative">
                    <div class="absolute inset-0 flex items-center">
                        <div class="w-full border-t border-gray-300"></div>
                    </div>
                    <div class="relative flex justify-center text-sm">
                        <span class="px-2 bg-white text-gray-500">
                            Status
                        </span>
                    </div>
                </div>

                <div class="mt-6 text-center text-sm text-gray-600">
                    @if (!IsAuthenticated)
                    {
                        <p>Not Connected / Not Authenticated</p>
                        <p class="mt-1">If you don't have credentials yet, please
                            <NavLink href="/register"
                                     class="font-medium text-indigo-600 hover:text-indigo-500">register
                            </NavLink>
                            .
                        </p>
                    }
                    else
                    {
                        <p>Connected & Authenticated as:</p>
                        <p class="font-mono text-xs bg-gray-100 p-1 inline-block rounded mt-1">@(SpacetimeService.LocalIdentity)</p>
                        <div class="mt-4">
                            @* Use NavLink for internal navigation or keep as button/<a> if preferred *@
                            <NavLink href="/profile" @* Changed from 'home' based on typical naming *@
                                     class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-sky-600 hover:bg-sky-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-sky-500">
                                Go to Profile
                            </NavLink>
                            <button @onclick="HandleLogout"
                                    class="ml-3 inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                Logout
                            </button>
                        </div>
                    }
                </div>
            </div>

        </div> @* End Card Body *@
    </div> @* End Centered Max Width Container *@
</div> @* End Main Container *@


@code {
    // Use a boolean flag to control form visibility instead of enum
    private bool IsVerifyingLogin { get; set; } = false;
    
    [Parameter]
    [SupplyParameterFromQuery(Name = "view")]
    public string? View { get; set; }

    protected override void OnParametersSet()
    {
        // Handle query parameter for view
        if (!string.IsNullOrEmpty(View))
        {
            if (View.Equals("verify", StringComparison.OrdinalIgnoreCase))
            {
                IsVerifyingLogin = true;
            }
            else if (View.Equals("login", StringComparison.OrdinalIgnoreCase))
            {
                IsVerifyingLogin = false;
            }
        }
        base.OnParametersSet();
    }

    private string ErrorMessage { get; set; } = "";
    private string SuccessMessage { get; set; } = "";
    private bool IsAuthenticated => SpacetimeService.IsConnected && SpacetimeService.LocalIdentity != null;
    // private bool IsAuthenticated => SpacetimeService.IsConnected && SpacetimeService.LocalIdentity != null && CurrentUser != null;
    private User? CurrentUser { get; set; } // Use nullable User type

    // Models for the different forms
    private LoginModel loginModel = new LoginModel();
    private ProfileModel profileModel = new ProfileModel(); // Keep ProfileModel if used elsewhere
    private VerifyModel verifyModel = new VerifyModel(); // Keep VerifyModel if used elsewhere

    // --- LifeCycle Methods ---
    protected override async Task OnInitializedAsync()
    {
        // Subscribe to events
        SpacetimeService.OnConnect += HandleConnectionChange;
        SpacetimeService.OnDisconnect += HandleConnectionChange;
        SpacetimeService.OnIdentityReceived += HandleIdentityReceived;
        SpacetimeService.OnProfileReceived += HandleProfileReceived; // Subscribe to profile events
        SpacetimeService.OnErrorReceived += HandleSpacetimeError;
        SpacetimeService.OnVerifyLoginSuccess += HandleLoginSuccess;

        // Check initial state
        HandleConnectionChange(); // This calls StateHasChanged internally

        await base.OnInitializedAsync(); // Ensure base method is called
    }

    // --- Event Handlers ---

    private void HandleConnectionChange()
    {
        // This logic seems correct, re-evaluates auth state and triggers UI update
        if (IsAuthenticated)
        {
            Logger.LogInformation("Authenticated. Attempting to load profile if not already loaded.");
            if (CurrentUser == null) // Only load if we don't have it yet
            {
                _ = LoadProfile(); // Fire and forget profile load
            }
        }
        else
        {
            Logger.LogInformation("Not authenticated. Resetting view to Login.");
            IsVerifyingLogin = false; // Ensure login form is shown if not authenticated
            CurrentUser = null; // Clear user data
        }
        InvokeAsync(StateHasChanged); // Ensure UI reflects the connection state change
    }

    private void HandleIdentityReceived(Identity identity)
    {
        Logger.LogInformation("Identity received: {Identity}", identity);
        // Now that we have identity, request profile if not already loaded
        if (CurrentUser == null)
        {
            _ = LoadProfile();
        }
        // Don't necessarily need StateHasChanged here if LoadProfile triggers it or OnProfileReceived does
        InvokeAsync(StateHasChanged); // Update UI to show identity
    }

    private void HandleProfileReceived(User user)
    {
        Logger.LogInformation("Profile received for user: {Username}", user?.Username ?? "[No Username]");
        CurrentUser = user;
        if (CurrentUser != null)
        {
            // Populate the profile model if needed elsewhere, but not directly used in this view's rendering
            profileModel = new ProfileModel
            {
                Email = CurrentUser.Email ?? ""
                // Populate other fields as needed
            };
            // CurrentView = AuthView.Profile; // No Profile View in this snippet, stay on Login/Status
        }
        else
        {
            Logger.LogWarning("Received null profile data?");
            ErrorMessage = "Received invalid profile data.";
        }
        // Ensure UI updates to reflect profile load (e.g., enable profile button if it depended on CurrentUser)
        InvokeAsync(StateHasChanged);
    }

    // Triggered when the verification code is sent successfully
    private void HandleLoginSuccess(string email) // Receives email from the event
    {
        Logger.LogInformation("Login request processed for: {Email}. Verification code sent.", email);
        ErrorMessage = "";
        SuccessMessage = $"Verification code sent to {email}. Please check your email.";
        
        // Make sure to set the email in the verify model
        verifyModel = new VerifyModel { Email = email };
        
        // Show verification form
        IsVerifyingLogin = true;
        
        // Ensure UI updates to show verification form
        InvokeAsync(StateHasChanged);
    }

    private async void HandleSpacetimeError(string errorType, string errorMessage)
    {
        Logger.LogError("SpacetimeDB Error ({ErrorType}): {ErrorMessage}", errorType, errorMessage);
        // Display a user-friendly message based on the error type/message if possible
        ErrorMessage = $"Error: {errorMessage}";
        SuccessMessage = ""; // Clear success message on error
        await InvokeAsync(StateHasChanged);
    }

    // --- Form Submission Handlers ---

    private async Task HandleLogin()
    {
        ErrorMessage = ""; // Clear previous error
        SuccessMessage = "Processing Login Request...";
        await InvokeAsync(StateHasChanged); // Show immediate feedback

        Logger.LogInformation("Attempting to request login code for: {email}", loginModel.Email);

        try
        {

            SpacetimeService.RequestLoginCode(loginModel.Email);
            // Success message will be updated by HandleLoginSuccess event handler
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error requesting login code for {Email}", loginModel.Email);
            ErrorMessage = $"Failed to send login request: {ex.Message}";
            SuccessMessage = "";
            await InvokeAsync(StateHasChanged);
        }
    }


    // HandleVerification and HandleProfileUpdate remain if needed for other views (Verify, Profile)
    private void HandleVerification()
    {
        try
        {
            ErrorMessage = "";
            SuccessMessage = "Verifying code...";
            Logger.LogInformation("Attempting email verification with code: {VerificationCode} for email {Email}", verifyModel.VerificationCode, verifyModel.Email);

            // This should trigger the actual connection/authentication with the token/identity
            SpacetimeService.VerifyLogin(verifyModel.VerificationCode, verifyModel.Email);

            // Success/failure will be handled by OnConnect/OnIdentityReceived/OnErrorReceived events
            // SuccessMessage = "Verification request sent. Attempting to log in..."; // Feedback
            // SwitchView(AuthView.Login); // Go back to login/status view
            verifyModel = new VerifyModel(); // Clear form
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Verification failed: {ex.Message}";
            Logger.LogError(ex, "Error during email verification submission");
            SuccessMessage = "";
        }
        InvokeAsync(StateHasChanged); // Update UI
    }

    private void HandleProfileUpdate()
    {
        if (!IsAuthenticated || CurrentUser == null)
        { /* ... error handling ... */
            return;
        }

        try
        {
            ErrorMessage = "";
            SuccessMessage = "Updating profile...";
            Logger.LogInformation("Attempting to update profile for user: {Identity}", SpacetimeService.LocalIdentity);

            SpacetimeService.UpdateProfile(
            profileModel.Email // Assuming only email is updatable here
            // Pass other fields if applicable
            );

            // Success/failure handled by OnProfileReceived / OnErrorReceived
            SuccessMessage = "Profile update request sent.";
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Profile update failed: {ex.Message}";
            Logger.LogError(ex, "Error during profile update submission");
            SuccessMessage = "";
        }
        InvokeAsync(StateHasChanged); // Update UI
    }

    private async Task LoadProfile()
    {
        if (!IsAuthenticated)
        {
            Logger.LogWarning("LoadProfile called but not authenticated.");
            // ErrorMessage = "You must be logged in to view your profile."; // Avoid overwriting other messages?
            return;
        }

        try
        {
            Logger.LogInformation("Requesting profile data from SpacetimeDB.");
            // ErrorMessage = ""; // Clear previous errors
            // SuccessMessage = "Loading profile..."; // Provide feedback
            SpacetimeService.RequestProfile(); // Service handles request/response and events
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading profile: {ex.Message}";
            Logger.LogError(ex, "Error requesting user profile");
            // SuccessMessage = ""; // Clear loading message
        }
        // State update will happen via HandleProfileReceived or HandleSpacetimeError
        await InvokeAsync(StateHasChanged); // Not strictly necessary here if events handle it
    }

    private void SwitchView(bool showVerifyForm)
    {
        // Simplified: Just set the flag and update state
        IsVerifyingLogin = showVerifyForm;
        ErrorMessage = ""; // Clear messages on view switch
        SuccessMessage = "";
        InvokeAsync(StateHasChanged); // Ensure UI updates
    }

    private async Task HandleLogout()
    {
        Logger.LogInformation("Logout requested.");
        ErrorMessage = "";
        SuccessMessage = "Logging out...";
        await InvokeAsync(StateHasChanged); // Show immediate feedback
        try
        {
            await SpacetimeService.DisconnectAsync();
            // State change (IsAuthenticated = false) will be handled by OnDisconnect triggering HandleConnectionChange
            // which will update the UI automatically.
            // SuccessMessage = ""; // Clear logging out message after disconnect event fires
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Logout failed: {ex.Message}";
            Logger.LogError(ex, "Error during logout");
            SuccessMessage = ""; // Clear logging out message
            await InvokeAsync(StateHasChanged); // Show error
        }
    }

    // --- IDisposable ---
    public void Dispose()
    {
        // Unsubscribe from events to prevent memory leaks
        SpacetimeService.OnConnect -= HandleConnectionChange;
        SpacetimeService.OnDisconnect -= HandleConnectionChange;
        SpacetimeService.OnIdentityReceived -= HandleIdentityReceived;
        SpacetimeService.OnProfileReceived -= HandleProfileReceived;
        SpacetimeService.OnErrorReceived -= HandleSpacetimeError;
        SpacetimeService.OnVerifyLoginSuccess -= HandleLoginSuccess;
        GC.SuppressFinalize(this);
    }

    // --- Models ---
    // Keep Models as they are, Tailwind doesn't affect them

    public class LoginModel {
        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address.")]
        [StringLength(254)] // Standard email max length
        public string Email { get; set; } = "admin@gmail.com"; // Default value might be removed
    }

    public class VerifyModel {
        [Required]
        [StringLength(6, MinimumLength = 6, ErrorMessage = "Verification code must be 6 characters")]
        [RegularExpression(@"^[a-zA-Z0-9]+$", ErrorMessage = "Verification code can only contain letters and numbers")]
        public string VerificationCode { get; set; } = "";

        [Required(ErrorMessage = "Email is required for verification context.")] // Keep email if needed by VerifyLogin service method
        [EmailAddress]
        public string Email { get; set; } = "";
    }

    public class ProfileModel {
        [Required]
        [EmailAddress]
        [StringLength(254)]
        public string Email { get; set; } = "";
        // Add other profile fields if they are editable
    }
}