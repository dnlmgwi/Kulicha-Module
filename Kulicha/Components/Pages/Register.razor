@page "/register"
@using System.ComponentModel.DataAnnotations
@using Kulicha.Services
@using Microsoft.Extensions.Logging
@using SpacetimeDB
@using SpacetimeDB.Types
@inject SpacetimeDbService SpacetimeService
@inject ILogger<Auth> Logger

<div class="container mt-4">
    <div class="row">
        <div class="col-md-6 offset-md-3">
            <div class="card">
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @ErrorMessage
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(SuccessMessage))
                    {
                        <div class="alert alert-success" role="alert">
                            @SuccessMessage
                        </div>
                    }

                    <h5 class="card-title">Register</h5>
                    <p class="text-muted">Create a new account</p>
                    <EditForm Model="@registerModel" OnValidSubmit="HandleRegister" FormName="register">
                        <DataAnnotationsValidator/>
                        <ValidationSummary/>

                        <div class="mb-3">
                            <label for="username" class="form-label">Username</label>
                            <InputText id="username" @bind-Value="registerModel.Username" class="form-control"/>
                            <ValidationMessage For="@(() => registerModel.Username)"/>
                        </div>

                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <InputText id="email" @bind-Value="registerModel.Email" type="email"
                                       class="form-control"/>
                            <ValidationMessage For="@(() => registerModel.Email)"/>
                        </div>

                        <div class="mb-3">
                            <label for="role" class="form-label">Role</label>
                            <InputSelect id="role" @bind-Value="registerModel.Role" class="form-select">
                                <option value="2">Beneficiary</option>
                                <option value="1">Benefactor</option>
                                <option value="0">Auditor</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => registerModel.Role)"/>
                        </div>

                        <button type="submit" class="btn btn-primary">Register</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    // Define view states for the component
    private enum AuthView {
        Login,
        Register,
        Verify,
        Profile
    }

    private AuthView CurrentView { get; set; } = AuthView.Register;
    [Parameter]
    [SupplyParameterFromQuery(Name = "view")]
    public string? View { get; set; }

    protected override void OnParametersSet()
    {
        if (!string.IsNullOrEmpty(View))
        {
            if (Enum.TryParse<AuthView>(View, true, out var view))
            {
                CurrentView = view;
            }
        }
        base.OnParametersSet();
    }
    private string ErrorMessage { get; set; } = "";
    private string SuccessMessage { get; set; } = "";
    private bool IsVerificationNeeded { get; set; } = false; // Consider if this state is still needed or if backend drives it
    private bool IsAuthenticated => SpacetimeService.IsConnected && SpacetimeService.LocalIdentity != null;
    private User? CurrentUser { get; set; } // Use nullable User type

    // Models for the different forms
    private RegisterModel registerModel = new RegisterModel();
    private VerifyModel verifyModel = new VerifyModel();
    private ProfileModel profileModel = new ProfileModel();

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(View))
        {
            if (Enum.TryParse<AuthView>(View, true, out var view))
            {
                CurrentView = view;
            }
        }
        {
            SpacetimeService.OnConnect += HandleConnectionChange;
            SpacetimeService.OnDisconnect += HandleConnectionChange;
            SpacetimeService.OnIdentityReceived += HandleIdentityReceived;
            // SpacetimeService.OnProfileReceived += HandleProfileReceived;
            SpacetimeService.OnErrorReceived += HandleSpacetimeError; // Add handler for errors
            SpacetimeService.OnRegisterSuccess += HandleRegisterSuccess; // Add handler for successful registration

            // Check initial state
            HandleConnectionChange();

            await base.OnInitializedAsync();
        }

    }

    private void HandleConnectionChange()
    {
        if (IsAuthenticated)
        {
            Logger.LogInformation("Authenticated. Attempting to load profile.");
            _ = LoadProfile(); // Attempt to load profile when authenticated
            // Don't switch view here yet, wait for profile data or confirmation it doesn't exist
        }
        else
        {
            Logger.LogInformation("Not authenticated. Resetting view to Login.");
            CurrentView = AuthView.Register;
            CurrentUser = null;
            IsVerificationNeeded = false;
            profileModel = new ProfileModel();
        }
        InvokeAsync(StateHasChanged);
    }

    private void HandleIdentityReceived(Identity identity)
    {
        Logger.LogInformation("Identity received: {Username}", identity);
        // Now that we have identity, request profile
        _ = LoadProfile();
        InvokeAsync(StateHasChanged);
    }

    // New handler for receiving errors from SpacetimeDBService
    private void HandleSpacetimeError(string errorType, string errorMessage)
    {
        Logger.LogInformation("SpacetimeDB Error ({ErrorType}): {ErrorMessage}", errorType, errorMessage);
        ErrorMessage = $"Error ({errorType}): {errorMessage}";
        // Decide how to handle different errors, e.g., clear success message
        SuccessMessage = "";
        // Potentially switch view based on error, e.g., back to login on auth failure
        InvokeAsync(StateHasChanged);
    }

    private async Task LoadProfile()
    {
        if (!IsAuthenticated)
        {
            Logger.LogWarning("LoadProfile called but not authenticated.");
            ErrorMessage = "You must be logged in to view your profile.";
            SwitchView(AuthView.Login);
            return;
        }

        try
        {
            Logger.LogInformation("Requesting profile data from SpacetimeDB.");
            ErrorMessage = ""; // Clear previous errors
            SuccessMessage = "Loading profile..."; // Provide feedback
            // The SpacetimeDBService should handle the actual request/response
            // We just trigger the request here.
            SpacetimeService.RequestProfile();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading profile: {ex.Message}";
            Logger.LogInformation(ex, "Error requesting user profile");
            SuccessMessage = ""; // Clear loading message
            // Optionally switch back to login or show an error state
        }
        await InvokeAsync(StateHasChanged);
    }

    private void SwitchView(AuthView view)
    {
        // Only allow switching to Profile if authenticated and profile is loaded (or loading)
        if (view == AuthView.Profile && !IsAuthenticated)
        {
            Logger.LogWarning("Attempted to switch to Profile view while not authenticated.");
            CurrentView = AuthView.Login; // Redirect to login
        }
        // Only allow switching to Verify if verification is needed (might need better logic)
        else if (view == AuthView.Verify && !IsVerificationNeeded)
        {
            Logger.LogWarning("Attempted to switch to Verify view when verification is not marked as needed.");
            CurrentView = AuthView.Login;
        }
        else
        {
            CurrentView = view;
            StateHasChanged(); // Force UI update immediately after view change
        }

        // Clear messages when switching views unless it's an error redirect
        if (string.IsNullOrEmpty(ErrorMessage)) // Don't clear error message if we just set one
        {
            ErrorMessage = "";
        }
        SuccessMessage = ""; // Always clear success message on view switch
        StateHasChanged(); // Ensure UI updates
    }

    // HandleLogin might not be needed if connection handles auth automatically
    // private void HandleLogin()
    // {
    //     ErrorMessage = "";
    //     SuccessMessage = "Attempting to connect and authenticate...";
    //     Logger.LogInformation("Manual Login attempt triggered (usually handled by connection).");
    //     // Trigger connection if not already connecting?
    //     // SpacetimeService.Connect(); // Or similar method if available
    // }

    private async Task HandleRegister()
    {
        try
        {
            ErrorMessage = "";
            SuccessMessage = "Processing registration...";
            await InvokeAsync(StateHasChanged); // Update UI immediately to show processing message

            Logger.LogInformation("Attempting to register user: {Username}", registerModel.Username);

            // Check if we're connected first
            if (!SpacetimeService.IsConnected)
            {
                Logger.LogInformation("Not connected to SpacetimeDB. Registration will attempt to establish connection.");
                SuccessMessage = "Connecting to server...";
                await InvokeAsync(StateHasChanged);
            }

            // Call the service method to register the user
            // The service will attempt to connect if not already connected
            SpacetimeService.RegisterUser(
            registerModel.Username,
            registerModel.Email,
            registerModel.Role
            );

            // Provide feedback to the user that the request was sent
            // The actual success will be handled by the HandleRegisterSuccess method
            SuccessMessage = "Registration request sent. Processing...";
            await InvokeAsync(StateHasChanged);

            // Note: We don't redirect here anymore - we'll wait for the callback
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Registration failed: {ex.Message}";
            Logger.LogInformation(ex, "Error during registration submission");
            SuccessMessage = "";
            await InvokeAsync(StateHasChanged);
        }
    }

    private async void HandleRegisterSuccess(string username)
    {
        Logger.LogInformation("Registration successful for user: {Username}", username);

        // Update UI with success message
        ErrorMessage = "";
        SuccessMessage = $"Registration successful for {username}! You should receive a verification email shortly.";

        // Set verification as needed and prepare verification form
        IsVerificationNeeded = true;
        verifyModel.Email = registerModel.Email;


        await InvokeAsync(StateHasChanged);

        // Wait a moment before redirecting to ensure the user sees the success message
        await Task.Delay(2000);

        // Redirect to the Auth page with the verify view
        // Use NavigateTo with forceLoad:true to ensure a full page reload
        // This prevents the NavigationException that occurs when trying to navigate within a component
        //NavigationManager.NavigateTo("/verify", forceLoad: true);

        // Reset the register model for a fresh form if the user returns
        registerModel = new RegisterModel();
    }

    private void HandleVerification()
    {
        try
        {
            ErrorMessage = "";
            SuccessMessage = "";
            Logger.LogInformation("Attempting email verification with code: {VerificationCode}", verifyModel.VerificationCode);

            // Assume SpacetimeDBService takes care of sending the command
            SpacetimeService.VerifyAccount(verifyModel.VerificationCode);

            // Again, we assume success for now. Backend should confirm.
            // The SpacetimeDBService should receive confirmation and potentially trigger login/identity.
            SuccessMessage = "Verification request sent. If successful, you should be logged in shortly.";
            IsVerificationNeeded = false; // Clear the flag
            SwitchView(AuthView.Login); // Go back to login, connection should establish identity now

            // Clear verification form
            verifyModel = new VerifyModel();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Verification failed: {ex.Message}";
            Logger.LogInformation(ex, "Error during email verification submission");
            SuccessMessage = "";
        }
    }

    private void HandleProfileUpdate()
    {
        if (!IsAuthenticated || CurrentUser == null)
        {
            ErrorMessage = "Cannot update profile. You are not logged in.";
            Logger.LogWarning("Profile update attempted while not authenticated.");
            SwitchView(AuthView.Login);
            return;
        }

        try
        {
            ErrorMessage = "";
            SuccessMessage = "";
            Logger.LogInformation("Attempting to update profile for user: {Username}", CurrentUser.Username);

            // Assume SpacetimeDBService takes care of sending the command
            SpacetimeService.UpdateProfile(
            profileModel.Email // Assuming email can be updated
            // profileModel.Latitude,
            // profileModel.Longitude,
            // profileModel.Address,
            // profileModel.City,
            // profileModel.State,
            // profileModel.Country,
            // profileModel.PostalCode
            );

            // Assume success, backend should confirm and ideally send back updated profile
            SuccessMessage = "Profile update request sent.";
            // Optional: Re-request profile to get updated data immediately? Or wait for push update?
            // await LoadProfile();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Profile update failed: {ex.Message}";
            Logger.LogInformation(ex, "Error during profile update submission");
            SuccessMessage = "";
        }
    }

    private async Task HandleLogout()
    {
        try
        {
            Logger.LogInformation("Logout requested.");
            ErrorMessage = "";
            SuccessMessage = "Logging out...";
            // Disconnect from SpacetimeDB
            await SpacetimeService.DisconnectAsync(); // Assuming an async disconnect method
            // NavigationManager.NavigateTo("/", true); // Force reload can be disruptive, handle via state change
            // The HandleConnectionChange method should detect disconnection and switch view
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Logout failed: {ex.Message}";
            Logger.LogInformation(ex, "Error during logout");
            SuccessMessage = "";
        }
        // State should be updated by the OnDisconnect event handler triggering HandleConnectionChange
    }

    // Implement IDisposable to unsubscribe from events
    public void Dispose()
    {
        SpacetimeService.OnConnect -= HandleConnectionChange;
        SpacetimeService.OnDisconnect -= HandleConnectionChange;
        SpacetimeService.OnIdentityReceived -= HandleIdentityReceived;
        // SpacetimeService.OnProfileReceived -= HandleProfileReceived;
        SpacetimeService.OnErrorReceived -= HandleSpacetimeError;
        SpacetimeService.OnRegisterSuccess -= HandleRegisterSuccess;
        GC.SuppressFinalize(this); // Standard practice in Dispose pattern
    }

// --- Data model classes ---
// (Keep these as they are, they look reasonable)
    public class RegisterModel {
        [Required]
        [StringLength(32, MinimumLength = 3, ErrorMessage = "Username must be between 3 and 32 characters")]
        [RegularExpression(@"^[a-zA-Z0-9_]+$", ErrorMessage = "Username can only contain letters, numbers, and underscores")]
        public string Username { get; set; } = "admin";

        [Required]
        [EmailAddress]
        [StringLength(254)] // Standard email max length
        public string Email { get; set; } = "admin@gmail.com";

        [Required]
        [Range(0, 2, ErrorMessage = "Please select a valid role")]
        public int Role { get; set; } = 0; // Default to Auditor

// [Required]
// [Range(-90.0, 90.0, ErrorMessage = "Latitude must be between -90 and 90")]
// public double Latitude { get; set; } = 0;
//
// [Required]
// [Range(-180.0, 180.0, ErrorMessage = "Longitude must be between -180 and 180")]
// public double Longitude { get; set; } = 0;
//
// [Required]
// [StringLength(200, MinimumLength = 5, ErrorMessage = "Address should be between 5 and 200 characters")]
// public string Address { get; set; } = "";
//
// [Required]
// [StringLength(100, MinimumLength = 2, ErrorMessage = "City should be between 2 and 100 characters")]
// public string City { get; set; } = "";
//
// [Required]
// [StringLength(100, MinimumLength = 2, ErrorMessage = "State/Province should be between 2 and 100 characters")]
// public string State { get; set; } = "";
//
// [Required]
// [StringLength(100, MinimumLength = 2, ErrorMessage = "Country should be between 2 and 100 characters")]
// public string Country { get; set; } = "";
//
// [Required]
// [StringLength(20, MinimumLength = 3, ErrorMessage = "Postal Code should be between 3 and 20 characters")]
// public string PostalCode { get; set; } = "";
    }

    public class VerifyModel {
        [Required]
        [StringLength(6, MinimumLength = 6, ErrorMessage = "Verification code must be 6 characters")] // Assuming 6 char code
        [RegularExpression(@"^[a-zA-Z0-9]+$", ErrorMessage = "Verification code can only contain letters and numbers")]
        public string VerificationCode { get; set; } = "";

        [Required]
        [EmailAddress]
        [StringLength(254)] // Standard email max length
        public string Email { get; set; } = "";


// // Location data might be optional for verification if the backend uses the initially provided one
// // But including them allows potential correction if needed during verification step.
// [Required]
// [Range(-90.0, 90.0, ErrorMessage = "Latitude must be between -90 and 90")]
// public double Latitude { get; set; } = 0;
//
// [Required]
// [Range(-180.0, 180.0, ErrorMessage = "Longitude must be between -180 and 180")]
// public double Longitude { get; set; } = 0;
//
// [Required]
// [StringLength(200, MinimumLength = 5, ErrorMessage = "Address should be between 5 and 200 characters")]
// public string Address { get; set; } = "";
//
// [Required]
// [StringLength(100, MinimumLength = 2, ErrorMessage = "City should be between 2 and 100 characters")]
// public string City { get; set; } = "";
//
// [Required]
// [StringLength(100, MinimumLength = 2, ErrorMessage = "State/Province should be between 2 and 100 characters")]
// public string State { get; set; } = "";
//
// [Required]
// [StringLength(100, MinimumLength = 2, ErrorMessage = "Country should be between 2 and 100 characters")]
// public string Country { get; set; } = "";
//
// [Required]
// [StringLength(20, MinimumLength = 3, ErrorMessage = "Postal Code should be between 3 and 20 characters")]
// public string PostalCode { get; set; } = "";
    }

    public class ProfileModel {
        [Required]
        [EmailAddress]
        [StringLength(254)]
        public string Email { get; set; } = ""; // Allow email update?
    }
}